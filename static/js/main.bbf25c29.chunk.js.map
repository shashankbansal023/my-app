{"version":3,"sources":["component/About.js","component/Navbar.js","component/TextForm.js","component/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["About","useState","mode","setMode","color","backgroundColor","myStyle","setmyStyle","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","onClick","Navbar","props","href","title","aria-label","aria-current","role","toggl","toggle","htmlFor","TextForm","state","setState","heading","value","onChange","event","target","rows","newText","toUpperCase","showAlert","toLowerCase","navigator","clipboard","writeText","split","join","length","Alert","word","alert","charAt","slice","msg","App","setalert","message","setTimeout","document","body","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.bbf25c29.chunk.js","sourcesContent":["import React,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function About() {\r\n\r\n\r\n    const handleDarkMode = ()=>{\r\n        if(myStyle.color === 'black'){\r\n            setmyStyle({\r\n                color:'white',\r\n                backgroundColor : 'black'\r\n            })\r\n            setMode(\"Enable light mode\");\r\n        }else{\r\n            setmyStyle({\r\n                color:'black',\r\n                backgroundColor : 'white'\r\n            })\r\n            setMode(\"Enable dark mode\");\r\n        }\r\n            \r\n    }    \r\n    \r\n    const [mode,setMode] = useState(\"Enable dark Mode\")\r\n    \r\n    const [myStyle, setmyStyle] = useState({\r\n        color : 'black',\r\n        backgroundColor: 'white'\r\n    })\r\n\r\n    return (\r\n        <>\r\n                    <div className=\"container\" style={myStyle}>\r\n                        <div className=\"accordion\" style={myStyle} id=\"accordionExample\">\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                    Accordion Item #1\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the first item's accordion body.</strong> It is shown by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    Accordion Item #2\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the second item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                    Accordion Item #3\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                <div className=\"accordion-body\">\r\n                    <strong>This is the third item's accordion body.</strong> It is hidden by default, until the collapse plugin adds the appropriate classes that we use to style each element. These classes control the overall appearance, as well as the showing and hiding via CSS transitions. You can modify any of this with custom CSS or overriding our default variables. It's also worth noting that just about any HTML can go within the <code>.accordion-body</code>, though the transition does limit overflow.\r\n                </div>\r\n                </div>\r\n            </div>\r\n            </div>\r\n         </div>\r\n         <div className=\"container\">\r\n         <button type=\"button\" className=\"btn btn-primary mx-3 \" onClick={handleDarkMode}>{mode}</button>    \r\n</div>\r\n</>\r\n    )\r\n}\r\n","import React from 'react'\r\n// import PropTypes from 'prop-types'\r\n\r\n// import {\r\n//   Link\r\n// } from \"react-router-dom\";\r\n\r\nexport default function Navbar(props) {\r\n\r\n    return (\r\n        <>\r\n            <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a>\r\n        </li>\r\n        {/* <li className=\"nav-item\">\r\n          <a className=\"nav-link\" to=\"/about\">About</a>\r\n        </li> */}\r\n      \r\n      </ul>\r\n      {/* <form className=\"d-flex\">\r\n        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\r\n        <button className=\"btn btn-outline-success\" type=\"submit\">Search</button>\r\n      </form> */}\r\n     <div className=\"btn-group me-2\" role=\"group\" aria-label=\"First group\">\r\n        <button type=\"button\" className=\"btn btn-primary\" onClick={()=>props.toggl(\"#0d6efd\")}>1</button>\r\n        <button type=\"button\" className=\"btn btn-secondary\" onClick={()=>props.toggl(\"grey\")}>2</button>\r\n        <button type=\"button\" className=\"btn btn-success\" onClick={()=>props.toggl(\"#198754\")}>3</button>\r\n        <button type=\"button\" className=\"btn btn-danger\" onClick={()=>props.toggl(\"#dc3545\")}>4</button>\r\n      </div>\r\n\r\n      <div className= {`form-check form-switch text-${props.mode===\"light\"}?\"light\":\"dark\"`}>\r\n        <input className=\"form-check-input\" onClick={props.toggle} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" style={{color: props.mode===\"light\"?\"black\":\"white\"}}htmlFor=\"flexSwitchCheckDefault\">Enable Dark Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n        </>\r\n    )\r\n}\r\n// Navbar.propTypes ={\r\n//     title:PropTypes.string\r\n// }\r\n\r\n// Navbar.defaultProps={\r\n//     title: \"Set me\"\r\n// }\r\n\r\n","import React,{useState} from 'react'\r\n\r\nexport default function TextForm(props) {\r\n\r\n    const handleOnChange = (event)=>{\r\n        setState(event.target.value)\r\n        // console.log(\"on change\")\r\n    }\r\n    const handleOnClick = ()=>{\r\n        let newText = state.toUpperCase();\r\n        setState(newText);\r\n        props.showAlert(\"Converted to Uppercase\",\"success\")\r\n    }\r\n\r\n    const handleLowClick=()=>{\r\n        let newText = state.toLowerCase();\r\n        setState(newText);\r\n        props.showAlert(\"Converted to Lowercase\",\"success\")\r\n    }\r\n\r\n    const handleClear=()=>{\r\n        let newText ='';\r\n        setState(newText);\r\n        props.showAlert(\"Text cleared\",\"success\")\r\n    }\r\n    \r\n    const [state, setState] = useState(\"primary\");\r\n\r\n  \r\n\r\n    // const handleCopy=()=>{\r\n    //     let copyText = document.getElementById('myBox') ;\r\n    //     copyText.select();\r\n    //     copyText.setSelectionRange(0, 99999);\r\n    //     navigator.clipboard.writeText(copyText.value);\r\n\r\n    // }\r\n\r\n    const handleCopy=()=>{\r\n        navigator.clipboard.writeText(state);\r\n        props.showAlert(\"Copied to Clipboard!\",\"success\")\r\n    }\r\n\r\n    const handleRemove=()=>{\r\n        setState(state.split(/\\s+/).join(\" \"));\r\n        props.showAlert(\"Extra spaces removed\",\"success\")\r\n    }\r\n\r\n\r\n    return (   \r\n        <>\r\n        <div className=\"container\">\r\n            <h1 style={{color: props.mode===\"light\"?\"black\":\"white\"}}>{props.heading}</h1>  \r\n            <div className=\"mb-3\"> \r\n                <textarea className=\"form-control\" style={{color: props.mode===\"light\"?\"black\":\"white\",backgroundColor: props.mode===\"light\"?\"white\":\"grey\"}} id=\"myBox\" value={state} onChange={handleOnChange}  rows=\"8\"></textarea>\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary mx-2 \" onClick={handleOnClick}>Convert to Uppercase</button>\r\n            <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n            <button type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleClear}>Clear text</button>\r\n            <button  type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleCopy}>Copy</button>\r\n            <button  type=\"button\" className=\"btn btn-primary mx-2\" onClick={handleRemove}>Remove extra spaces</button>\r\n            \r\n           \r\n        </div>\r\n        <div className=\"container my-3\" style={{color: props.mode===\"light\"?\"black\":\"white\"}}>\r\n            <h1>Your text summary</h1>\r\n            <p>{state.split(\" \").length}words and {state.length} characters</p>\r\n            <p>{0.008* state.split(\" \").length} minutes to read</p>\r\n            <h2>Preview</h2>\r\n            <p>{state.length > 0? state :\"Enter something to preview about \"}</p>\r\n        </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n","import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    const capitalize =(word)=>{\r\n        let newText = word.toLowerCase();\r\n        return newText.charAt(0).toUpperCase() + word.slice(1);\r\n    }\r\n\r\n    return (\r\n        props.alert &&\r\n        <div>\r\n             <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n                <strong>{capitalize(props.alert.type)}.!!!! </strong>{props.alert.msg}\r\n            </div>\r\n            \r\n        </div>\r\n       \r\n    )\r\n}\r\n","\nimport './App.css';\nimport About from './component/About';\nimport Navbar from './component/Navbar';\nimport TextForm from './component/TextForm';\nimport React, { useState } from 'react'\nimport Alert from './component/Alert';\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom'\n\n\n\nfunction App() {\n\n  const [alert, setalert] = useState(null)\n const [mode,setMode] = useState(\"light\");\n\n const showAlert=(message,type)=>{\n      setalert({\n        msg: message,\n        type: type\n      })\n      setTimeout(() => {\n        setalert(null)\n      },2000);\n }\n\n const toggleSwitch=()=>{\n   if(mode===\"light\"){\n      setMode('dark');\n      document.body.style.backgroundColor = \"#0f3442\";\n      showAlert(\"Dark Mode Enabled\",\"success\")\n   }else{\n     setMode('light');\n     document.body.style.backgroundColor = \"white\";\n     showAlert(\"Light Mode Enabled\",\"success\")\n   }\n }\n\nconst toggleButton = (color)=>{\n  document.body.style.backgroundColor = color;\n  showAlert(`${color} mode on`,\"success\");\n}\n\n\n return (\n   <>\n    <Router>       \n    <Navbar title=\"TextUtils\" toggle={toggleSwitch} mode={mode} toggl={toggleButton}/>\n    <Alert alert={alert}/>\n        <Routes>\n            <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Enter the text below to analyze:\" mode={mode}/>} />\n            <Route path=\"/about\" element={<About/>} />\n         </Routes>\n    </Router>\n    </>\n  ); \n}\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}